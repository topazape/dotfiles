# Configuration for the marimo editor

[completion]
  # Configuration for code completion.

  A dict with key/value pairs configuring code completion in the marimo
  editor.

  **Keys.**

  - `activate_on_typing`: if `False`, completion won't activate
  until the completion hotkey is entered
  - `copilot`: if `True`, enable the GitHub Copilot language server

  activate_on_typing: bool

  copilot: Union[bool, Literal['github', 'codeium']]

  codeium_api_key: Optional[str]

[display]
  # Configuration for display.

  **Keys.**

  - `theme`: `"light"`, `"dark"`, or `"system"`
  - `code_editor_font_size`: font size for the code editor
  - `cell_output`: `"above"` or `"below"`
  - `dataframes`: `"rich"` or `"plain"`

  theme: Theme

  code_editor_font_size: int

  cell_output: Literal['above', 'below']

  default_width: WidthType

  dataframes: Literal['rich', 'plain']

[formatting]
  # Configuration for code formatting.

  **Keys.**

  - `line_length`: max line length

  line_length: int

[keymap]
  # Configuration for keymaps.

  **Keys.**

  - `preset`: one of `"default"` or `"vim"`
  - `overrides`: a dict of keymap actions to their keymap override

  preset: Literal['default', 'vim']

  overrides: Dict[str, str]

[runtime]
  # Configuration for runtime.

  **Keys.**

  - `auto_instantiate`: if `False`, cells won't automatically
      run on startup. This only applies when editing a notebook,
      and not when running as an application.
      The default is `True`.
  - `auto_reload`: if `lazy`, cells importing modified modules will marked
    as stale; if `autorun`, affected cells will be automatically run. similar
    to IPython's %autoreload extension but with more code intelligence.
  - `on_cell_change`: if `lazy`, cells will be marked stale when their
    ancestors run but won't autorun; if `autorun`, cells will automatically
    run when their ancestors run.
  - `execution_type`: if `relaxed`, marimo will not clone cell declarations;
    if `strict` marimo will clone cell declarations by default, avoiding
    hidden potential state build up.
  - `watcher_on_save`: how to handle file changes when saving. `"lazy"` marks
      affected cells as stale, `"autorun"` automatically runs affected cells.

  auto_instantiate: bool

  auto_reload: Literal['off', 'lazy', 'autorun']

  on_cell_change: OnCellChangeType

  watcher_on_save: Literal['lazy', 'autorun']

[save]
  # Configuration for saving.

  **Keys.**

  - `autosave`: one of `"off"` or `"after_delay"`
  - `delay`: number of milliseconds to wait before autosaving
  - `format_on_save`: if `True`, format the code on save

  autosave: Literal['off', 'after_delay']

  autosave_delay: int

  format_on_save: bool

[server]
  # Configuration for the server.

  **Keys.**

  - `browser`: the web browser to use. `"default"` or a browser registered
      with Python's webbrowser module (eg, `"firefox"` or `"chrome"`)
  - `follow_symlink`: if true, the server will follow symlinks it finds
      inside its static assets directory.

  browser: Union[Literal['default'], str]

  follow_symlink: bool

[package_management]
  # Configuration options for package management.

  **Keys.**

  - `manager`: the package manager to use

  manager: Literal['pip', 'rye', 'uv', 'poetry', 'pixi']

[ai]
  # Configuration options for AI.

  **Keys.**

  - `rules`: custom rules to include in all AI completion prompts
  - `open_ai`: the OpenAI config
  - `anthropic`: the Anthropic config
  - `google`: the Google AI config

  rules: str

  [open_ai]
    # Configuration options for OpenAI or OpenAI-compatible services.

    **Keys.**

    - `api_key`: the OpenAI API key
    - `model`: the model to use.
        if model starts with `claude-` we use the AnthropicConfig
    - `base_url`: the base URL for the API

      api_key: str

      model: str

      base_url: str

  [anthropic]
    # Configuration options for Anthropic.

    **Keys.**

    - `api_key`: the Anthropic

      api_key: str

  [google]
    # Configuration options for Google AI.

    **Keys.**

    - `api_key`: the Google AI API key

      api_key: str

experimental: Dict[str, Any]

[snippets]
  # Configuration for snippets.

  **Keys.**

  - `custom_path`: the path to the custom snippets directory

  custom_paths: List[str]

  include_default_snippets: bool

